{"version":3,"file":"static/js/709.ec0a1ea4.chunk.js","mappings":"iPAEaA,EAAOC,EAAAA,EAAAA,GAAH,6hBAyBJC,EAASD,EAAAA,EAAAA,OAAH,kS,mBCtBNE,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvBC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,UAACN,EAAD,WACGI,EAAQG,KADX,KACmBH,EAAQI,QACzB,SAACN,EAAD,CAAQO,QAJS,kBAAMJ,GAASK,EAAAA,EAAAA,IAAeN,EAAQO,IAAtC,EAIjB,sBAGL,ECbYC,EAAoB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEzBC,EAAc,SAAAH,GAAK,OAAIA,EAAMC,SAASG,YAAnB,EACnBC,EAAe,SAAAL,GAAK,OAAIA,EAAMC,SAASK,SAAnB,EAGpBC,EAAY,SAAAP,GAAK,OAAIA,EAAMQ,OAAOA,MAAjB,ECLjBC,EAAOrB,EAAAA,EAAAA,GAAH,qECOJsB,GDFOtB,EAAAA,EAAAA,GAAH,6hBAyBKA,EAAAA,EAAAA,OAAH,kSCvBS,WAC1B,IAAMa,GAAWU,EAAAA,EAAAA,IAAYR,GACvBK,GAASG,EAAAA,EAAAA,IAAYJ,GASrBK,EAPkB,WACtB,IAAMC,EAAmBL,EAAOM,cAChC,OAAOb,EAASO,QAAO,SAAAjB,GAAO,OAC5BA,EAAQG,KAAKoB,cAAcC,SAASF,EADR,GAG/B,CAEsBG,GAEvB,OACE,SAACP,EAAD,UACGG,EAAeK,KAAI,SAAA1B,GAAO,OACzB,SAACD,EAAD,CAAcC,QAASA,GAAcA,EAAQO,GADpB,KAKhC,G,UCVGoB,EAAS,WAGX,IAH0B,IAAdC,EAAc,uDAAP,GACfrB,EAAK,GACLsB,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfrB,GADE0B,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAO1B,CACR,E,mBCjCY6B,EAAOvC,EAAAA,EAAAA,KAAH,0FAMJwC,EAAQxC,EAAAA,EAAAA,MAAH,+CAILyC,EAAQzC,EAAAA,EAAAA,MAAH,8RAcLC,EAAOD,EAAAA,EAAAA,OAAD,uRCfJ,SAAS0C,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOrC,EAAP,KAAasC,EAAb,KACA,GAA4BD,EAAAA,EAAAA,UAAS,IAArC,eAAOpC,EAAP,KAAesC,EAAf,KAGMC,EAAchB,IACdiB,EAAgBjB,IAEhBjB,GAAWU,EAAAA,EAAAA,IAAYZ,GACvBP,GAAWC,EAAAA,EAAAA,MAEX2C,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtB5C,EAAR,EAAQA,KAAM6C,EAAd,EAAcA,MAEd,OAAQ7C,GACN,IAAK,OACHsC,EAAQO,GACR,MAEF,IAAK,SACHN,EAAUM,GACV,MAEF,QACE,OAEL,EAkBKC,EAAQ,WACZR,EAAQ,IACRC,EAAU,GACX,EAED,OACE,UAACN,EAAD,CAAMc,SAtBa,SAAAJ,GACnBA,EAAMK,iBACN,IAAMC,EAAa,CACjB7C,GAAIoB,IACJxB,KAAAA,EACAC,OAAAA,GAEmBM,EAAS2C,MAC5B,SAAArD,GAAO,OAAIA,EAAQG,KAAKoB,gBAAkBpB,EAAKoB,aAAxC,IAGL+B,MAAM,GAAD,OAAInD,EAAJ,2BACLF,GAASsD,EAAAA,EAAAA,IAAYH,IACzBH,GACD,EAQC,WACE,UAACZ,EAAD,CAAOmB,QAASb,EAAhB,mBAEE,SAACL,EAAD,CACE/B,GAAIoC,EACJc,KAAK,OACLtD,KAAK,OACL6C,MAAO7C,EACPuD,SAAUb,EACVc,QAAQ,yHACRC,UAAQ,QAGZ,UAACvB,EAAD,CAAOmB,QAASZ,EAAhB,qBAEE,SAACN,EAAD,CACE/B,GAAIqC,EACJa,KAAK,MACLtD,KAAK,SACL6C,MAAO5C,EACPsD,SAAUb,EACVc,QAAQ,yFACRE,MAAM,+FACND,UAAQ,QAGZ,SAAC,EAAD,CAAQH,KAAK,SAAb,2BAGL,CAEDlB,EAASuB,WAAa,CACpB3D,KAAM4D,IAAAA,OAAAA,WACN3D,OAAQ2D,IAAAA,OAAAA,WACRb,SAAUa,IAAAA,KAAAA,Y,oBC7FC1B,EAAQxC,EAAAA,EAAAA,MAAH,8FAMLyC,EAAQzC,EAAAA,EAAAA,MAAH,4TCmBlB,GDHsBA,EAAAA,EAAAA,OAAH,kSCjBI,WACrB,IAAMI,GAAWC,EAAAA,EAAAA,MACXe,GAASG,EAAAA,EAAAA,IAAYJ,GAM3B,OACE,SAAC,EAAD,WACE,SAAC,EAAD,CACEyC,KAAK,OACLtD,KAAMc,EACN+B,MAAO/B,EACPyC,SAVW,SAAAZ,GACf7C,GAAS+D,EAAAA,EAAAA,GAAclB,EAAMC,OAAOC,OACrC,EASKiB,YAAY,2BAInB,GCjBc,SAASC,IACtB,IAAMjE,GAAWC,EAAAA,EAAAA,MACXa,GAAYK,EAAAA,EAAAA,IAAYN,GAM9B,OAJAqD,EAAAA,EAAAA,YAAU,WACRlE,GAASmE,EAAAA,EAAAA,MACV,GAAE,CAACnE,KAGF,4BACE,8CACA,SAACsC,EAAD,KACA,SAAC,EAAD,IACCxB,IAAa,SAACI,EAAD,MAGnB,C,mCChBD,IAAIkD,EAAuBC,EAAQ,MAEnC,SAASC,IAAkB,CAC3B,SAASC,IAA2B,CACpCA,EAAuBC,kBAAoBF,EAE3CG,EAAOC,QAAU,WACf,SAASC,EAAKC,EAAOC,EAAUC,EAAeC,EAAUC,EAAcC,GACpE,GAAIA,IAAWb,EAAf,CAIA,IAAIc,EAAM,IAAIC,MACZ,mLAKF,MADAD,EAAIhF,KAAO,sBACLgF,CAPL,CAQF,CAED,SAASE,IACP,OAAOT,CACR,CAHDA,EAAKU,WAAaV,EAMlB,IAAIW,EAAiB,CACnBC,MAAOZ,EACPa,OAAQb,EACRc,KAAMd,EACNe,KAAMf,EACNxE,OAAQwE,EACRgB,OAAQhB,EACRiB,OAAQjB,EACRkB,OAAQlB,EAERmB,IAAKnB,EACLoB,QAASX,EACTY,QAASrB,EACTsB,YAAatB,EACbuB,WAAYd,EACZe,KAAMxB,EACNyB,SAAUhB,EACViB,MAAOjB,EACPkB,UAAWlB,EACXmB,MAAOnB,EACPoB,MAAOpB,EAEPqB,eAAgBlC,EAChBC,kBAAmBF,GAKrB,OAFAgB,EAAexB,UAAYwB,EAEpBA,CACR,C,uBC/CCb,EAAOC,QAAUL,EAAQ,IAARA,E,gCCNnBI,EAAOC,QAFoB,8C","sources":["components/ContactsItem/ContactsItem.styled.jsx","components/ContactsItem/ContactsItem.jsx","redux/contacts/selectors.js","components/ContactsList/ContactsList.styled.jsx","components/ContactsList/ContactsList.jsx","../node_modules/nanoid/index.browser.js","components/FormBook/FormBok.styled.jsx","components/FormBook/FormBook.jsx","components/FilterContacts/FilterContacts.styled.jsx","components/FilterContacts/FilterContacts.jsx","components/pages/Contacts.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  background-color: #2ad8b2;\n  margin-bottom: 15px;\n  padding: 15px;\n  border-radius: 5px;\n  transition: all 300ms ease 0s;\n  box-shadow: #2fe6be;\n  align-items: center;\n  box-shadow: rgb(0 0 0) 0px 1px 5px;\n\n  &:hover {\n    color: rgb(255, 255, 255);\n    background: linear-gradient(\n      281deg,\n      rgb(23 145 128) 0%,\n      rgb(59 207 70) 100%\n    );\n    scale: 1.01;\n    color: white;\n    box-shadow: rgb(0 0 0 / 89%) 0px 7px 10px;\n  }\n`;\n\nexport const Button = styled.button`\n  border-radius: 5px;\n  border: 1px solid rgba(14, 185, 190, 0.925);\n  transition: all 250ms ease 0s;\n  &:hover {\n    color: rgb(255, 255, 255);\n    background: linear-gradient(\n      281deg,\n      rgb(23 145 128) 0%,\n      rgb(59 207 70) 100%\n    );\n  }\n`;","import { Item, Button } from './ContactsItem.styled';\n\nimport { deleteContacts } from 'redux/contacts/operations';\nimport { useDispatch } from 'react-redux';\n\nexport const ContactsItem = ({ contact }) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContacts(contact.id));\n  return (\n    <Item>\n      {contact.name}: {contact.number}\n      <Button onClick={handleDelete}>Delete</Button>\n    </Item>\n  );\n};\n","export const selectLoading = state => state.contacts.loading;\nexport const selectAllContatcs = state => state.contacts.items;\n\nexport const getContacts = state => state.contacts.contactItems;\nexport const getIsLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\nexport const selectFilter = state => state.filter.value;\nexport const getFilter = state => state.filter.filter;","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  background-color: #2ad8b2;\n  margin-bottom: 15px;\n  padding: 15px;\n  border-radius: 5px;\n  transition: all 300ms ease 0s;\n  box-shadow: #2fe6be;\n  align-items: center;\n  box-shadow: rgb(0 0 0) 0px 1px 5px;\n\n  &:hover {\n    color: rgb(255, 255, 255);\n    background: linear-gradient(\n      281deg,\n      rgb(23 145 128) 0%,\n      rgb(59 207 70) 100%\n    );\n    scale: 1.01;\n    color: white;\n    box-shadow: rgb(0 0 0 / 89%) 0px 7px 10px;\n  }\n`;\n\nexport const Button = styled.button`\n  border-radius: 5px;\n  border: 1px solid rgba(14, 185, 190, 0.925);\n  transition: all 250ms ease 0s;\n  &:hover {\n    color: rgb(255, 255, 255);\n    background: linear-gradient(\n      281deg,\n      rgb(23 145 128) 0%,\n      rgb(59 207 70) 100%\n    );\n  }\n`;\n","import React from 'react';\nimport { ContactsItem } from 'components/ContactsItem/ContactsItem';\nimport { useSelector } from 'react-redux';\nimport { getContacts,getFilter } from 'redux/contacts/selectors'; \n\n// Стилі\nimport { List } from './ContactsList.styled';\n// import { selectFilterContacts } from 'redux/selectors';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const getFindContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const getFindContact = getFindContacts();\n\n  return (\n    <List>\n      {getFindContact.map(contact => (\n        <ContactsItem contact={contact} key={contact.id} />\n      ))}\n    </List>\n  );\n};\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n`;\n\nexport const Label = styled.label`\n  margin-right: 10px;\n`;\n\nexport const Input = styled.input`\n  margin-left: 3px;\n  background-color: transparent;\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-image: initial;\n  border-bottom: 2px solid rgb(34, 145, 135);\n  outline: none;\n  &::placeholder {\n    text-align: center;\n  }\n`;\n\nexport const Button=styled.button`\n    border-radius: 5px;\n    border: 1px solid rgba(14, 185, 190, 0.925);\n    transition: all 250ms ease 0s;\n    &:hover{\n        color: rgb(255, 255, 255);\n        background: linear-gradient(281deg, rgb(23 145 128) 0%, rgb(59 207 70) 100%);\n    }\n`","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport PropTypes from 'prop-types';\n// Стилі\nimport { Form, Label, Input, Button } from './FormBok.styled';\n\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { addContacts } from 'redux/contacts/operations';\nimport { selectAllContatcs } from 'redux/contacts/selectors';\n\nexport default function FormBook() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  // Генератор ID\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const contacts = useSelector(selectAllContatcs);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    const checkContact = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n    checkContact\n      ? alert(`${name} is already in contact`)\n      : dispatch(addContacts(newContact));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label htmlFor={nameInputId}>\n        Name:\n        <Input\n          id={nameInputId}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          required\n        />\n      </Label>\n      <Label htmlFor={numberInputId}>\n        Number:\n        <Input\n          id={numberInputId}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </Label>\n      <Button type=\"submit\">Add Contact</Button>\n    </Form>\n  );\n}\n\nFormBook.prototypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  justify-content: center;\n  margin-bottom: 15px;\n`;\n\nexport const Input = styled.input`\n  margin-left: 3px;\n  background-color: transparent;\n  border-top: none;\n  border-left: none;\n  border-right: none;\n  border-image: initial;\n  border-bottom: 2px solid rgb(34, 145, 135);\n  outline: none;\n  /* text-align: center; */\n\n  ::placeholder {\n    text-align: center;\n  }\n`;\n\nexport const Button = styled.button`\n  border-radius: 5px;\n  border: 1px solid rgba(14, 185, 190, 0.925);\n  transition: all 250ms ease 0s;\n  &:hover {\n    color: rgb(255, 255, 255);\n    background: linear-gradient(\n      281deg,\n      rgb(23 145 128) 0%,\n      rgb(59 207 70) 100%\n    );\n  }\n`;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { filterContact } from 'redux/contacts/filterSlise';\nimport { getFilter } from 'redux/contacts/selectors';\n// Стилі\nimport { Label, Input } from './FilterContacts.styled';\n\nconst FilterContacts = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const onChange = event => {\n    dispatch(filterContact(event.target.value));\n  };\n\n  return (\n    <Label>\n      <Input\n        type=\"text\"\n        name={filter}\n        value={filter}\n        onChange={onChange}\n        placeholder=\"Find contacts by name\"\n      />\n    </Label>\n  );\n};\nexport default FilterContacts;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport FormBook from 'components/FormBook/FormBook';\nimport FilterContacts from 'components/FilterContacts/FilterContacts';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getIsLoading } from 'redux/contacts/selectors';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <title>Your Contacts</title>\n      <FormBook />\n      <FilterContacts />\n      {isLoading && <ContactsList />}\n    </div>\n  );\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["Item","styled","Button","ContactsItem","contact","dispatch","useDispatch","name","number","onClick","deleteContacts","id","selectAllContatcs","state","contacts","items","getContacts","contactItems","getIsLoading","isLoading","getFilter","filter","List","ContactsList","useSelector","getFindContact","normalizedFilter","toLowerCase","includes","getFindContacts","map","nanoid","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","Form","Label","Input","FormBook","useState","setName","setNumber","nameInputId","numberInputId","handleChange","event","target","value","reset","onSubmit","preventDefault","newContact","some","alert","addContacts","htmlFor","type","onChange","pattern","required","title","prototypes","PropTypes","filterContact","placeholder","Contacts","useEffect","fetchContacts","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}